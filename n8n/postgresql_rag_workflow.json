{
  "name": "AI Horizon RAG Agent - PostgreSQL Production",
  "nodes": [
    {
      "parameters": {
        "updates": [
          "message",
          "document",
          "edited_message"
        ],
        "additionalFields": {
          "download": false
        }
      },
      "id": "telegram-trigger",
      "name": "Telegram Trigger",
      "type": "n8n-nodes-base.telegramTrigger",
      "typeVersion": 1.1,
      "position": [200, 300],
      "webhookId": "telegram-bot-horizon",
      "credentials": {
        "telegramApi": {
          "id": "telegram-credentials",
          "name": "Telegram Bot API"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "// Enhanced Route Detection with Bot Message Filtering\nconst update = $json;\nlet routeType = 'unknown';\nlet data = {};\n\n// IMPORTANT: Skip bot messages to prevent loops\nif (update.message && update.message.from && update.message.from.is_bot) {\n  console.log('Skipping bot message to prevent loop');\n  return {\n    json: {\n      routeType: 'skip',\n      reason: 'Bot message ignored to prevent loop'\n    }\n  };\n}\n\n// Handle Telegram messages\nif (update.message) {\n  // Check if it's a command\n  if (update.message.text?.startsWith('/')) {\n    const command = update.message.text.split(' ')[0].toLowerCase();\n    \n    if (command === '/stats') {\n      routeType = 'stats';\n      data = {\n        routeType: 'stats',\n        command: 'stats',\n        chatId: update.message.chat.id,\n        userId: update.message.from.id,\n        username: update.message.from.username || update.message.from.first_name,\n        messageId: update.message.message_id\n      };\n    } else if (command === '/help') {\n      routeType = 'help';\n      data = {\n        routeType: 'help',\n        chatId: update.message.chat.id,\n        userId: update.message.from.id,\n        username: update.message.from.username || update.message.from.first_name,\n        messageId: update.message.message_id\n      };\n    }\n  }\n  // Check if it's a document upload\n  else if (update.message.document) {\n    const doc = update.message.document;\n    routeType = 'document';\n    data = {\n      routeType: 'document',\n      fileId: doc.file_id,\n      fileName: doc.file_name || 'unknown',\n      mimeType: doc.mime_type || 'application/octet-stream',\n      fileSize: doc.file_size,\n      chatId: update.message.chat.id,\n      userId: update.message.from.id,\n      username: update.message.from.username || update.message.from.first_name,\n      messageId: update.message.message_id,\n      source: 'telegram'\n    };\n  } \n  // Check if it's a text message with URL\n  else if (update.message.text) {\n    const text = update.message.text;\n    const urlRegex = /(https?:\\/\\/[^\\s]+)/g;\n    const urls = text.match(urlRegex);\n    \n    if (urls && urls.length > 0) {\n      const url = urls[0];\n      \n      if (url.includes('youtube.com') || url.includes('youtu.be')) {\n        routeType = 'youtube';\n        data = {\n          routeType: 'youtube',\n          url: url,\n          chatId: update.message.chat.id,\n          userId: update.message.from.id,\n          username: update.message.from.username || update.message.from.first_name,\n          messageId: update.message.message_id\n        };\n      } else if (url.includes('tiktok.com')) {\n        routeType = 'tiktok';\n        data = {\n          routeType: 'tiktok',\n          url: url,\n          chatId: update.message.chat.id,\n          userId: update.message.from.id,\n          username: update.message.from.username || update.message.from.first_name,\n          messageId: update.message.message_id\n        };\n      } else {\n        routeType = 'url';\n        data = {\n          routeType: 'url',\n          url: url,\n          chatId: update.message.chat.id,\n          userId: update.message.from.id,\n          username: update.message.from.username || update.message.from.first_name,\n          messageId: update.message.message_id\n        };\n      }\n    } else {\n      // Regular chat message\n      routeType = 'chat';\n      data = {\n        routeType: 'chat',\n        message: text,\n        query: text,\n        text: text,\n        chatId: update.message.chat.id,\n        userId: update.message.from.id,\n        username: update.message.from.username || update.message.from.first_name,\n        messageId: update.message.message_id,\n        timestamp: new Date().toISOString()\n      };\n    }\n  }\n}\n\nreturn {\n  json: data\n};"
      },
      "id": "detect-route-type",
      "name": "Detect Route Type",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [400, 300]
    },
    {
      "parameters": {
        "rules": {
          "values": [
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict"
                },
                "conditions": [
                  {
                    "leftValue": "={{ $json.routeType }}",
                    "rightValue": "document",
                    "operator": {
                      "type": "string",
                      "operation": "equals"
                    }
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "document"
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict"
                },
                "conditions": [
                  {
                    "leftValue": "={{ $json.routeType }}",
                    "rightValue": "youtube",
                    "operator": {
                      "type": "string",
                      "operation": "equals"
                    }
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "youtube"
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict"
                },
                "conditions": [
                  {
                    "leftValue": "={{ $json.routeType }}",
                    "rightValue": "chat",
                    "operator": {
                      "type": "string",
                      "operation": "equals"
                    }
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "chat"
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict"
                },
                "conditions": [
                  {
                    "leftValue": "={{ $json.routeType }}",
                    "rightValue": "stats",
                    "operator": {
                      "type": "string",
                      "operation": "equals"
                    }
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "stats"
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict"
                },
                "conditions": [
                  {
                    "leftValue": "={{ $json.routeType }}",
                    "rightValue": "help",
                    "operator": {
                      "type": "string",
                      "operation": "equals"
                    }
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "help"
            }
          ]
        },
        "options": {
          "fallbackOutput": "none"
        }
      },
      "id": "route-by-type",
      "name": "Route by Type",
      "type": "n8n-nodes-base.switch",
      "typeVersion": 3,
      "position": [600, 300]
    },
    {
      "parameters": {
        "resource": "file",
        "fileId": "={{ $json.fileId }}"
      },
      "id": "download-telegram-file",
      "name": "Download Telegram File",
      "type": "n8n-nodes-base.telegram",
      "typeVersion": 1,
      "position": [800, 100],
      "credentials": {
        "telegramApi": {
          "id": "telegram-credentials",
          "name": "Telegram Bot API"
        }
      },
      "continueOnFail": true
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://app.dumplingai.com/api/v1/doc-to-text",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Authorization",
              "value": "Bearer {{ $credentials.dumplingAi.apiKey }}"
            },
            {
              "name": "Content-Type",
              "value": "application/json"
            }
          ]
        },
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {
              "name": "inputMethod",
              "value": "file"
            },
            {
              "name": "file",
              "value": "={{ $binary.data }}"
            }
          ]
        }
      },
      "id": "process-document-dumpling",
      "name": "Process Document (Dumpling)",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [1000, 100],
      "credentials": {
        "dumplingAi": {
          "id": "dumpling-credentials",
          "name": "Dumpling AI API"
        }
      }
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://app.dumplingai.com/api/v1/get-youtube-transcript",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Authorization",
              "value": "Bearer {{ $credentials.dumplingAi.apiKey }}"
            },
            {
              "name": "Content-Type",
              "value": "application/json"
            }
          ]
        },
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {
              "name": "videoUrl",
              "value": "={{ $json.url }}"
            },
            {
              "name": "includeTimestamps",
              "value": true
            }
          ]
        }
      },
      "id": "process-youtube-dumpling",
      "name": "Process YouTube (Dumpling)",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [800, 200],
      "credentials": {
        "dumplingAi": {
          "id": "dumpling-credentials",
          "name": "Dumpling AI API"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "// Merge extracted content with original data\nconst originalData = $('Detect Route Type').item.json;\nconst extractedText = $json.text || $json.transcript || $json.content || '';\n\nreturn {\n  json: {\n    ...originalData,\n    extractedText: extractedText,\n    hasContent: extractedText.length > 0\n  }\n};"
      },
      "id": "merge-extracted-content",
      "name": "Merge Extracted Content",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [1200, 150]
    },
    {
      "parameters": {
        "model": "gpt-4o-mini",
        "messages": {
          "messageValues": [
            {
              "role": "system",
              "content": "You are an AI Horizon Forecasting expert analyzing how AI impacts cybersecurity work. Classify content based on the AI Horizon Forecasting Pipeline framework.\n\nClassifications:\n- Replace: AI will fully automate this task without human involvement\n- Augment: AI will support/accelerate but not fully automate the task\n- Remain Human: Task will remain primarily human due to complexity, judgment, ethics\n- New Task: Emerging job duty created by AI advances\n\nScoring (0-1 scale):\n- Credibility: Source reliability and authority\n- Impact: Magnitude of potential change to the workforce\n- Specificity: Level of detail and actionability\n- Confidence: Your certainty in the classification\n\nDCWF Task Mapping:\nIdentify specific DCWF task IDs mentioned or implied. Common examples:\n- T0023: Network traffic analysis\n- T0166: Event correlation\n- T0214: Network alert analysis\n- T0503: Cybersecurity alert monitoring\n- T0582: Technical documentation\n- T0180: Network traffic vulnerability analysis\n- T0121: Security design implementation\n- T0176: Secure code reviews\n- T0240: Malicious traffic analysis\n- T0432: Intrusion artifact collection\n\nReturn JSON:\n{\n  \"classification\": \"Replace|Augment|Remain Human|New Task\",\n  \"confidence\": 0.0-1.0,\n  \"rationale\": \"Clear explanation referencing specific evidence\",\n  \"scores\": {\n    \"credibility\": 0.0-1.0,\n    \"impact\": 0.0-1.0,\n    \"specificity\": 0.0-1.0\n  },\n  \"dcwf_tasks\": [\"task_ids\"],\n  \"summary\": \"2-3 sentence summary of key findings\",\n  \"title\": \"Brief descriptive title\"\n}"
            },
            {
              "role": "user",
              "content": "Analyze this content for AI's impact on cybersecurity work:\n\n{{ $json.extractedText }}"
            }
          ]
        },
        "options": {
          "temperature": 0.3,
          "responseFormat": {
            "type": "json_object"
          }
        }
      },
      "id": "classify-content-ai",
      "name": "AI Classify Content",
      "type": "n8n-nodes-base.openAi",
      "typeVersion": 1.3,
      "position": [1400, 150],
      "credentials": {
        "openAi": {
          "id": "openai-credentials",
          "name": "OpenAI API"
        }
      }
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://api.openai.com/v1/embeddings",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Authorization",
              "value": "Bearer {{ $credentials.openAi.apiKey }}"
            },
            {
              "name": "Content-Type",
              "value": "application/json"
            }
          ]
        },
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {
              "name": "model",
              "value": "text-embedding-ada-002"
            },
            {
              "name": "input",
              "value": "={{ $('Merge Extracted Content').item.json.extractedText }}"
            }
          ]
        }
      },
      "id": "generate-document-embedding",
      "name": "Generate Document Embedding",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [1600, 150],
      "credentials": {
        "openAi": {
          "id": "openai-credentials",
          "name": "OpenAI API"
        }
      }
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "INSERT INTO documents (\n  artifact_id, title, summary, content, source_url, source_type, filename, \n  classification, confidence, rationale, dcwf_task_ids, \n  credibility_score, impact_score, specificity_score, embedding,\n  user_id, chat_id, username\n) VALUES (\n  $1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16, $17, $18\n) RETURNING id, artifact_id;",
        "additionalFields": {
          "mode": "independently"
        },
        "queryParams": "={{ [\n  $now.format('YYYYMMDD_HHmmss') + '_' + $('Merge Extracted Content').item.json.userId,\n  $('AI Classify Content').item.json.title || $('Merge Extracted Content').item.json.fileName || 'Untitled',\n  $('AI Classify Content').item.json.summary,\n  $('Merge Extracted Content').item.json.extractedText,\n  $('Merge Extracted Content').item.json.url || '',\n  $('Merge Extracted Content').item.json.routeType,\n  $('Merge Extracted Content').item.json.fileName || 'unknown',\n  $('AI Classify Content').item.json.classification,\n  $('AI Classify Content').item.json.confidence,\n  $('AI Classify Content').item.json.rationale,\n  JSON.stringify($('AI Classify Content').item.json.dcwf_tasks || []),\n  $('AI Classify Content').item.json.scores.credibility,\n  $('AI Classify Content').item.json.scores.impact,\n  $('AI Classify Content').item.json.scores.specificity,\n  '[' + $json.data[0].embedding.join(',') + ']',\n  $('Merge Extracted Content').item.json.userId,\n  $('Merge Extracted Content').item.json.chatId,\n  $('Merge Extracted Content').item.json.username\n] }}"
      },
      "id": "store-document-postgres",
      "name": "Store Document in PostgreSQL",
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.4,
      "position": [1800, 150],
      "credentials": {
        "postgres": {
          "id": "postgres-credentials",
          "name": "PostgreSQL Database"
        }
      }
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://api.telegram.org/bot{{ $credentials.telegramApi.accessToken }}/sendMessage",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Content-Type",
              "value": "application/json"
            }
          ]
        },
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {
              "name": "chat_id",
              "value": "={{ $('Merge Extracted Content').item.json.chatId }}"
            },
            {
              "name": "text",
              "value": "📄 *Document processed successfully!*\\n\\n📌 **File:** {{ $('Merge Extracted Content').item.json.fileName }}\\n🏷️ **Classification:** {{ $('AI Classify Content').item.json.classification }} ({{ Math.round($('AI Classify Content').item.json.confidence * 100) }}% confidence)\\n📝 **Summary:** {{ $('AI Classify Content').item.json.summary }}\\n🎯 **DCWF Tasks:** {{ $('AI Classify Content').item.json.dcwf_tasks.join(', ') }}\\n💬 **Ask me anything about it!**"
            },
            {
              "name": "parse_mode",
              "value": "Markdown"
            }
          ]
        }
      },
      "id": "send-document-confirmation",
      "name": "Send Document Confirmation",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [2000, 150],
      "credentials": {
        "telegramApi": {
          "id": "telegram-credentials",
          "name": "Telegram Bot API"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "// Prepare message for AI processing\nconst input = $json;\nconst userMessage = input.message || input.query || input.text || '';\n\nif (!userMessage) {\n  throw new Error('No message provided');\n}\n\nreturn {\n  json: {\n    userMessage: userMessage,\n    chatId: input.chatId,\n    userId: input.userId,\n    username: input.username,\n    messageId: input.messageId,\n    timestamp: input.timestamp || new Date().toISOString()\n  }\n};"
      },
      "id": "prepare-chat-input",
      "name": "Prepare Chat Input",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [800, 400]
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://api.openai.com/v1/embeddings",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Authorization",
              "value": "Bearer {{ $credentials.openAi.apiKey }}"
            },
            {
              "name": "Content-Type",
              "value": "application/json"
            }
          ]
        },
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {
              "name": "model",
              "value": "text-embedding-ada-002"
            },
            {
              "name": "input",
              "value": "={{ $json.userMessage }}"
            }
          ]
        }
      },
      "id": "generate-query-embedding",
      "name": "Generate Query Embedding",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [1000, 400],
      "credentials": {
        "openAi": {
          "id": "openai-credentials",
          "name": "OpenAI API"
        }
      }
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "SELECT * FROM match_documents('[{{ $json.data[0].embedding.join(',') }}]'::vector, 0.7, 5, '{{ $('Prepare Chat Input').item.json.userId }}');",
        "additionalFields": {
          "mode": "independently"
        }
      },
      "id": "vector-search-documents",
      "name": "Vector Search Documents",
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.4,
      "position": [1200, 400],
      "credentials": {
        "postgres": {
          "id": "postgres-credentials",
          "name": "PostgreSQL Database"
        }
      }
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "SELECT * FROM get_chat_history('{{ $('Prepare Chat Input').item.json.userId }}', '{{ $('Prepare Chat Input').item.json.chatId }}', 10);",
        "additionalFields": {
          "mode": "independently"
        }
      },
      "id": "get-chat-history",
      "name": "Get Chat History",
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.4,
      "position": [1200, 600],
      "credentials": {
        "postgres": {
          "id": "postgres-credentials",
          "name": "PostgreSQL Database"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "// Build comprehensive context from chat history and vector search results\nlet chatData, history = [], searchResults = [];\n\n// Get chat data\ntry {\n  chatData = $('Prepare Chat Input').item.json;\n} catch (e) {\n  throw new Error('Chat input data not available');\n}\n\n// Get chat history\ntry {\n  history = $('Get Chat History').all() || [];\n} catch (e) {\n  console.log('No chat history available');\n}\n\n// Get vector search results\ntry {\n  searchResults = $('Vector Search Documents').all() || [];\n} catch (e) {\n  console.log('No search results available');\n}\n\n// Format chat history\nconst formattedHistory = history\n  .slice(0, 5)\n  .reverse()\n  .map(msg => `${msg.json.role === 'user' ? 'User' : 'Assistant'}: ${msg.json.content}`)\n  .join('\\n\\n');\n\n// Format search results with similarity scores\nlet relevantDocs = 'No relevant documents found.';\nif (searchResults.length > 0) {\n  relevantDocs = searchResults\n    .filter(doc => doc.json && doc.json.similarity > 0.7)\n    .slice(0, 3)\n    .map(doc => {\n      const data = doc.json;\n      const title = data.title || 'Untitled';\n      const classification = data.classification || 'Unknown';\n      const content = (data.content || '').substring(0, 800);\n      const filename = data.filename || 'Unknown file';\n      const similarity = ((data.similarity || 0) * 100).toFixed(1);\n      const dcwfTasks = data.dcwf_task_ids ? data.dcwf_task_ids.join(', ') : 'None';\n      return `📄 **Document:** ${title}\\n📁 **File:** ${filename}\\n🏷️ **Classification:** ${classification}\\n🎯 **DCWF Tasks:** ${dcwfTasks}\\n📊 **Similarity:** ${similarity}%\\n📝 **Content:** ${content}...\\n`;\n    })\n    .join('\\n---\\n');\n}\n\n// Build comprehensive system message\nconst systemMessage = `You are an AI Horizon assistant specializing in cybersecurity workforce analysis. You help analyze how artificial intelligence impacts cybersecurity tasks and roles based on the DCWF (Department of Homeland Security Cybersecurity Workforce Framework).\n\nYour expertise includes:\n- Classifying AI impact as: Replace, Augment, Remain Human, or New Task\n- Mapping findings to specific DCWF task IDs and work roles\n- Providing insights on workforce transformation\n- Analyzing documents, videos, and research\n\nRelevant documents from the knowledge base (with similarity scores):\n${relevantDocs}\n\nRecent conversation history:\n${formattedHistory || 'No previous messages.'}\n\nWhen relevant documents are found, reference them in your response with their similarity scores and DCWF task mappings. Be specific about the sources and provide actionable insights. Always mention specific DCWF task IDs when relevant.`;\n\nreturn {\n  json: {\n    systemMessage: systemMessage,\n    userMessage: chatData.userMessage,\n    chatId: chatData.chatId,\n    userId: chatData.userId,\n    username: chatData.username,\n    messageId: chatData.messageId,\n    documentsFound: searchResults.length,\n    historyCount: history.length,\n    hasRelevantDocs: searchResults.filter(doc => doc.json && doc.json.similarity > 0.7).length > 0\n  }\n};"
      },
      "id": "build-ai-context",
      "name": "Build AI Context",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [1400, 500]
    },
    {
      "parameters": {
        "model": "gpt-4o-mini",
        "messages": {
          "messageValues": [
            {
              "role": "system",
              "content": "={{ $json.systemMessage }}"
            },
            {
              "role": "user",
              "content": "={{ $json.userMessage }}"
            }
          ]
        },
        "options": {
          "temperature": 0.7,
          "maxTokens": 1500
        }
      },
      "id": "generate-ai-response",
      "name": "Generate AI Response",
      "type": "n8n-nodes-base.openAi",
      "typeVersion": 1.3,
      "position": [1600, 500],
      "credentials": {
        "openAi": {
          "id": "openai-credentials",
          "name": "OpenAI API"
        }
      }
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "INSERT INTO chat_memory (user_id, chat_id, username, role, content, message_id) VALUES ($1, $2, $3, $4, $5, $6);",
        "additionalFields": {
          "mode": "independently"
        },
        "queryParams": "={{ [\n  $('Build AI Context').item.json.userId,\n  $('Build AI Context').item.json.chatId,\n  $('Build AI Context').item.json.username,\n  'user',\n  $('Build AI Context').item.json.userMessage,\n  $('Build AI Context').item.json.messageId\n] }}"
      },
      "id": "save-user-message",
      "name": "Save User Message",
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.4,
      "position": [1800, 400],
      "credentials": {
        "postgres": {
          "id": "postgres-credentials",
          "name": "PostgreSQL Database"
        }
      }
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "INSERT INTO chat_memory (user_id, chat_id, username, role, content) VALUES ($1, $2, $3, $4, $5);",
        "additionalFields": {
          "mode": "independently"
        },
        "queryParams": "={{ [\n  $('Build AI Context').item.json.userId,\n  $('Build AI Context').item.json.chatId,\n  $('Build AI Context').item.json.username,\n  'assistant',\n  $json.message.content\n] }}"
      },
      "id": "save-assistant-response",
      "name": "Save Assistant Response",
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.4,
      "position": [1800, 600],
      "credentials": {
        "postgres": {
          "id": "postgres-credentials",
          "name": "PostgreSQL Database"
        }
      }
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://api.telegram.org/bot{{ $credentials.telegramApi.accessToken }}/sendMessage",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Content-Type",
              "value": "application/json"
            }
          ]
        },
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {
              "name": "chat_id",
              "value": "={{ $('Build AI Context').item.json.chatId }}"
            },
            {
              "name": "text",
              "value": "={{ $('Generate AI Response').item.json.message.content }}"
            },
            {
              "name": "parse_mode",
              "value": "Markdown"
            }
          ]
        }
      },
      "id": "send-telegram-response",
      "name": "Send Telegram Response",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [2000, 500],
      "credentials": {
        "telegramApi": {
          "id": "telegram-credentials",
          "name": "Telegram Bot API"
        }
      }
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "SELECT * FROM get_user_stats('{{ $json.userId }}');",
        "additionalFields": {
          "mode": "independently"
        }
      },
      "id": "get-user-stats",
      "name": "Get User Stats",
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.4,
      "position": [800, 700],
      "credentials": {
        "postgres": {
          "id": "postgres-credentials",
          "name": "PostgreSQL Database"
        }
      }
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://api.telegram.org/bot{{ $credentials.telegramApi.accessToken }}/sendMessage",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Content-Type",
              "value": "application/json"
            }
          ]
        },
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {
              "name": "chat_id",
              "value": "={{ $('Detect Route Type').item.json.chatId }}"
            },
            {
              "name": "text",
              "value": "📊 **Your AI Horizon Stats**\\n\\n📄 **Documents Processed:** {{ $json.documents_processed || 0 }}\\n💬 **Messages Sent:** {{ $json.messages_sent || 0 }}\\n\\n**📈 Classifications:**\\n🔄 Replace: {{ $json.classifications_replace || 0 }}\\n🤝 Augment: {{ $json.classifications_augment || 0 }}\\n👤 Remain Human: {{ $json.classifications_remain_human || 0 }}\\n✨ New Task: {{ $json.classifications_new_task || 0 }}\\n\\n📊 **Average Confidence:** {{ Math.round(($json.avg_confidence || 0) * 100) }}%"
            },
            {
              "name": "parse_mode",
              "value": "Markdown"
            }
          ]
        }
      },
      "id": "send-stats-response",
      "name": "Send Stats Response",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [1000, 700],
      "credentials": {
        "telegramApi": {
          "id": "telegram-credentials",
          "name": "Telegram Bot API"
        }
      }
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://api.telegram.org/bot{{ $credentials.telegramApi.accessToken }}/sendMessage",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Content-Type",
              "value": "application/json"
            }
          ]
        },
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {
              "name": "chat_id",
              "value": "={{ $json.chatId }}"
            },
            {
              "name": "text",
              "value": "🤖 **AI Horizon RAG Agent - Help**\\n\\n**What I can do:**\\n📄 Analyze documents, PDFs, research papers\\n🎥 Process YouTube videos and TikToks\\n💬 Answer questions about cybersecurity AI impact\\n🎯 Map findings to DCWF tasks and work roles\\n\\n**Commands:**\\n/stats - View your usage statistics\\n/help - Show this help message\\n\\n**How to use:**\\n1. Send me documents or URLs to analyze\\n2. Ask questions about AI impact on cybersecurity\\n3. I'll search my knowledge base and provide insights\\n\\n**Example questions:**\\n• How will AI impact SOC analysts?\\n• What DCWF tasks are most likely to be automated?\\n• Show me recent findings about threat analysis\\n\\n**Classifications I use:**\\n🔄 **Replace** - AI fully automates the task\\n🤝 **Augment** - AI assists but doesn't replace humans\\n👤 **Remain Human** - Task stays primarily human\\n✨ **New Task** - Emerging role created by AI"
            },
            {
              "name": "parse_mode",
              "value": "Markdown"
            }
          ]
        }
      },
      "id": "send-help-response",
      "name": "Send Help Response",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [800, 800],
      "credentials": {
        "telegramApi": {
          "id": "telegram-credentials",
          "name": "Telegram Bot API"
        }
      }
    }
  ],
  "connections": {
    "Telegram Trigger": {
      "main": [
        [
          {
            "node": "Detect Route Type",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Detect Route Type": {
      "main": [
        [
          {
            "node": "Route by Type",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Route by Type": {
      "main": [
        [
          {
            "node": "Download Telegram File",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Process YouTube (Dumpling)",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Prepare Chat Input",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Get User Stats",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Send Help Response",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Download Telegram File": {
      "main": [
        [
          {
            "node": "Process Document (Dumpling)",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Process Document (Dumpling)": {
      "main": [
        [
          {
            "node": "Merge Extracted Content",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Process YouTube (Dumpling)": {
      "main": [
        [
          {
            "node": "Merge Extracted Content",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Merge Extracted Content": {
      "main": [
        [
          {
            "node": "AI Classify Content",
            "type": "main",
            "index": 0
          },
          {
            "node": "Generate Document Embedding",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Generate Document Embedding": {
      "main": [
        [
          {
            "node": "Store Document in PostgreSQL",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Store Document in PostgreSQL": {
      "main": [
        [
          {
            "node": "Send Document Confirmation",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Prepare Chat Input": {
      "main": [
        [
          {
            "node": "Generate Query Embedding",
            "type": "main",
            "index": 0
          },
          {
            "node": "Get Chat History",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Generate Query Embedding": {
      "main": [
        [
          {
            "node": "Vector Search Documents",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Vector Search Documents": {
      "main": [
        [
          {
            "node": "Build AI Context",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get Chat History": {
      "main": [
        [
          {
            "node": "Build AI Context",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Build AI Context": {
      "main": [
        [
          {
            "node": "Generate AI Response",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Generate AI Response": {
      "main": [
        [
          {
            "node": "Save User Message",
            "type": "main",
            "index": 0
          },
          {
            "node": "Save Assistant Response",
            "type": "main",
            "index": 0
          },
          {
            "node": "Send Telegram Response",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get User Stats": {
      "main": [
        [
          {
            "node": "Send Stats Response",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "pinData": {},
  "settings": {
    "executionOrder": "v1"
  },
  "staticData": null,
  "tags": [],
  "triggerCount": 1,
  "updatedAt": "2024-12-19T12:00:00.000Z",
  "versionId": "postgresql-rag-v1.0"
}