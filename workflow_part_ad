e": "={{ $('AI Classify Content').item.json.dcwf_tasks }}"
            },
            {
              "column": "credibility_score",
              "value": "={{ $('AI Classify Content').item.json.scores.credibility }}"
            },
            {
              "column": "impact_score",
              "value": "={{ $('AI Classify Content').item.json.scores.impact }}"
            },
            {
              "column": "specificity_score",
              "value": "={{ $('AI Classify Content').item.json.scores.specificity }}"
            },
            {
              "column": "embedding",
              "value": "={{ '[' + $json.data[0].embedding.join(',') + ']' }}"
            },
            {
              "column": "user_id",
              "value": "={{ $('Detect Route Type').item.json.userId }}"
            },
            {
              "column": "chat_id",
              "value": "={{ $('Detect Route Type').item.json.chatId }}"
            },
            {
              "column": "username",
              "value": "={{ $('Detect Route Type').item.json.username }}"
            }
          ]
        }
      },
      "id": "store-document-supabase",
      "name": "Store Document in Supabase",
      "type": "n8n-nodes-base.supabase",
      "typeVersion": 1,
      "position": [1600, 150],
      "credentials": {
        "supabaseApi": {
          "id": "supabase-credentials",
          "name": "Supabase API"
        }
      }
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://api.telegram.org/bot{{ $credentials.telegramApi.accessToken }}/sendMessage",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Content-Type",
              "value": "application/json"
            }
          ]
        },
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {
              "name": "chat_id",
              "value": "={{ $('Detect Route Type').item.json.chatId }}"
            },
            {
              "name": "text",
              "value": "üìÑ *Document processed successfully!*\\n\\nüìå **File:** {{ $('Detect Route Type').item.json.fileName }}\\nüè∑Ô∏è **Classification:** {{ $('AI Classify Content').item.json.classification }} ({{ Math.round($('AI Classify Content').item.json.confidence * 100) }}% confidence)\\nüìù **Summary:** {{ $('AI Classify Content').item.json.summary }}\\nüéØ **DCWF Tasks:** {{ $('AI Classify Content').item.json.dcwf_tasks.join(', ') }}\\nüí¨ **Ask me anything about it!**"
            },
            {
              "name": "parse_mode",
              "value": "Markdown"
            }
          ]
        }
      },
      "id": "send-document-confirmation",
      "name": "Send Document Confirmation",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [1800, 150],
      "credentials": {
        "telegramApi": {
          "id": "telegram-credentials",
          "name": "Telegram Bot API"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "// Prepare chat input for RAG processing\nconst input = $json;\nconst userMessage = input.message || input.query || input.text || '';\n\nif (!userMessage) {\n  throw new Error('No message provided');\n}\n\nreturn {\n  json: {\n    userMessage: userMessage,\n    chatId: input.chatId,\n    userId: input.userId,\n    username: input.username,\n    messageId: input.messageId,\n    timestamp: input.timestamp || new Date().toISOString()\n  }\n};"
      },
      "id": "prepare-chat-input",
      "name": "Prepare Chat Input",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [800, 400]
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://api.openai.com/v1/embeddings",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Authorization",
              "value": "Bearer {{ $credentials.openAi.apiKey }}"
            },
            {
              "name": "Content-Type",
              "value": "application/json"
            }
          ]
        },
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {
              "name": "model",
              "value": "text-embedding-ada-002"
            },
            {
              "name": "input",
              "value": "={{ $json.userMessage }}"
            }
          ]
        }
      },
      "id": "generate-query-embedding",
      "name": "Generate Query Embedding",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [1000, 400],
      "credentials": {
        "openAi": {
          "id": "openai-credentials",
          "name": "OpenAI API"
        }
      }
    },
    {
      "parameters": {
        "operation": "runSql",
        "query": "SELECT *, (embedding <=> '[{{ $json.data[0].embedding.join(',') }}]'::vector) as distance 